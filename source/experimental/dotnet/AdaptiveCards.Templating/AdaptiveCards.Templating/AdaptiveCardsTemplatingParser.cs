//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from AdaptiveCardsTemplating.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class AdaptiveCardsTemplatingParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, ID=4, NUM=5, WS=6;
	public const int
		RULE_prog = 0, RULE_template = 1, RULE_prop = 2;
	public static readonly string[] ruleNames = {
		"prog", "template", "prop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "ID", "NUM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AdaptiveCardsTemplating.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AdaptiveCardsTemplatingParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AdaptiveCardsTemplatingParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AdaptiveCardsTemplatingParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplatingVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplatingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; template();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContext : ParserRuleContext {
		public PropContext[] prop() {
			return GetRuleContexts<PropContext>();
		}
		public PropContext prop(int i) {
			return GetRuleContext<PropContext>(i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplatingVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplatingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 2, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; prop();
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 9; Match(T__0);
				State = 10; prop();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
	 
		public PropContext() { }
		public virtual void CopyFrom(PropContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropArrayContext : PropContext {
		public ITerminalNode ID() { return GetToken(AdaptiveCardsTemplatingParser.ID, 0); }
		public ITerminalNode NUM() { return GetToken(AdaptiveCardsTemplatingParser.NUM, 0); }
		public PropArrayContext(PropContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplatingVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplatingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropIDContext : PropContext {
		public ITerminalNode ID() { return GetToken(AdaptiveCardsTemplatingParser.ID, 0); }
		public PropIDContext(PropContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAdaptiveCardsTemplatingVisitor<TResult> typedVisitor = visitor as IAdaptiveCardsTemplatingVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(Context, State);
		EnterRule(_localctx, 4, RULE_prop);
		try {
			State = 21;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new PropArrayContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 16; Match(ID);
				State = 17; Match(T__1);
				State = 18; Match(NUM);
				State = 19; Match(T__2);
				}
				break;
			case 2:
				_localctx = new PropIDContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 20; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\b', '\x1A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xE', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x11', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x18', '\n', 
		'\x4', '\x3', '\x4', '\x2', '\x2', '\x5', '\x2', '\x4', '\x6', '\x2', 
		'\x2', '\x2', '\x18', '\x2', '\b', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\n', '\x3', '\x2', '\x2', '\x2', '\x6', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\t', '\x5', '\x4', '\x3', '\x2', '\t', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\xF', '\x5', '\x6', '\x4', '\x2', '\v', '\f', '\a', 
		'\x3', '\x2', '\x2', '\f', '\xE', '\x5', '\x6', '\x4', '\x2', '\r', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x5', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\a', '\x6', '\x2', '\x2', 
		'\x13', '\x14', '\a', '\x4', '\x2', '\x2', '\x14', '\x15', '\a', '\a', 
		'\x2', '\x2', '\x15', '\x18', '\a', '\x5', '\x2', '\x2', '\x16', '\x18', 
		'\a', '\x6', '\x2', '\x2', '\x17', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\xF', '\x17',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
