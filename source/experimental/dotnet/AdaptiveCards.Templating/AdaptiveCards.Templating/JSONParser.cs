//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JSON.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class JSONParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		TEMPLKEYWRD=10, STRING=11, NUMBER=12, WS=13;
	public const int
		RULE_json = 0, RULE_obj = 1, RULE_pair = 2, RULE_array = 3, RULE_value = 4;
	public static readonly string[] ruleNames = {
		"json", "obj", "pair", "array", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "','", "'}'", "':'", "'['", "']'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "TEMPLKEYWRD", 
		"STRING", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JSON.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JSONParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JSONParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JSONParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class JsonContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 0, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 2, RULE_obj);
		int _la;
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12; Match(T__0);
				State = 13; pair();
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 14; Match(T__1);
					State = 15; pair();
					}
					}
					State = 20;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 21; Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23; Match(T__0);
				State = 24; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
	 
		public PairContext() { }
		public virtual void CopyFrom(PairContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JsonPairContext : PairContext {
		public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public JsonPairContext(PairContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPair(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TemplateDataContext : PairContext {
		public ITerminalNode TEMPLKEYWRD() { return GetToken(JSONParser.TEMPLKEYWRD, 0); }
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public TemplateDataContext(PairContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new JsonPairContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; Match(STRING);
				State = 28; Match(T__3);
				State = 29; value();
				}
				break;
			case TEMPLKEYWRD:
				_localctx = new TemplateDataContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 30; Match(TEMPLKEYWRD);
				State = 31; Match(T__3);
				State = 32; obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 6, RULE_array);
		int _la;
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35; Match(T__4);
				State = 36; value();
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 37; Match(T__1);
					State = 38; value();
					}
					}
					State = 43;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 44; Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; Match(T__4);
				State = 47; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueObjectContext : ValueContext {
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ValueObjectContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNullContext : ValueContext {
		public ValueNullContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		public ITerminalNode NUMBER() { return GetToken(JSONParser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(JSONParser.STRING, 0); }
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueArrayContext : ValueContext {
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueArrayContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJSONVisitor<TResult> typedVisitor = visitor as IJSONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_value);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; Match(NUMBER);
				}
				break;
			case T__0:
				_localctx = new ValueObjectContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; obj();
				}
				break;
			case T__4:
				_localctx = new ValueArrayContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 53; array();
				}
				break;
			case T__6:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 54; Match(T__6);
				}
				break;
			case T__7:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 55; Match(T__7);
				}
				break;
			case T__8:
				_localctx = new ValueNullContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 56; Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '>', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x13', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x16', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '$', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '*', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'-', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x33', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '<', '\n', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', 
		'\x6', '\b', '\n', '\x2', '\x2', '\x2', '\x43', '\x2', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x6', '#', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', ';', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x5', '\n', '\x6', '\x2', '\r', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\a', '\x3', '\x2', '\x2', 
		'\xF', '\x14', '\x5', '\x6', '\x4', '\x2', '\x10', '\x11', '\a', '\x4', 
		'\x2', '\x2', '\x11', '\x13', '\x5', '\x6', '\x4', '\x2', '\x12', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x17', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\a', '\x5', '\x2', '\x2', 
		'\x18', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', '\x3', 
		'\x2', '\x2', '\x1A', '\x1C', '\a', '\x5', '\x2', '\x2', '\x1B', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\r', 
		'\x2', '\x2', '\x1E', '\x1F', '\a', '\x6', '\x2', '\x2', '\x1F', '$', 
		'\x5', '\n', '\x6', '\x2', ' ', '!', '\a', '\f', '\x2', '\x2', '!', '\"', 
		'\a', '\x6', '\x2', '\x2', '\"', '$', '\x5', '\x4', '\x3', '\x2', '#', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '#', ' ', '\x3', '\x2', '\x2', '\x2', 
		'$', '\a', '\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\a', '\x2', '\x2', 
		'&', '+', '\x5', '\n', '\x6', '\x2', '\'', '(', '\a', '\x4', '\x2', '\x2', 
		'(', '*', '\x5', '\n', '\x6', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', 
		'*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\b', '\x2', '\x2', 
		'/', '\x33', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\a', '\x2', 
		'\x2', '\x31', '\x33', '\a', '\b', '\x2', '\x2', '\x32', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '<', '\a', '\r', '\x2', '\x2', '\x35', 
		'<', '\a', '\xE', '\x2', '\x2', '\x36', '<', '\x5', '\x4', '\x3', '\x2', 
		'\x37', '<', '\x5', '\b', '\x5', '\x2', '\x38', '<', '\a', '\t', '\x2', 
		'\x2', '\x39', '<', '\a', '\n', '\x2', '\x2', ':', '<', '\a', '\v', '\x2', 
		'\x2', ';', '\x34', '\x3', '\x2', '\x2', '\x2', ';', '\x35', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x36', '\x3', '\x2', '\x2', '\x2', ';', '\x37', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '\x39', 
		'\x3', '\x2', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\b', '\x14', '\x1B', '#', '+', '\x32', 
		';',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
