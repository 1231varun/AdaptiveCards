<script type="text/javascript">
	window.onload = () => {

		function getParameterByName(name, url) {
			if (!url) {
				url = window.location.href;
			}

			name = name.replace(/[\[\]]/g, "\\$&");
			var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
			var results = regex.exec(url);

			if (results && results[2]) {
				return decodeURIComponent(results[2].replace(/\+/g, " "));
			}
			else {
				return "";
			}
		}

		if (!ACDesigner.SettingsManager.isLocalStorageAvailable) {
			console.log("Local storage is not available.");
		}

		let hostContainers = [];
		hostContainers.push(new ACDesigner.WebChatContainer("Bot Framework WebChat", "containers/webchat-container.css"));
		hostContainers.push(new ACDesigner.CortanaContainer("Cortana Skills", "containers/cortana-container.css"));
		hostContainers.push(new ACDesigner.OutlookContainer("Outlook Actionable Messages", "containers/outlook-container.css"));
		hostContainers.push(new ACDesigner.TimelineContainer("Windows Timeline", "containers/timeline-container.css"));
		hostContainers.push(new ACDesigner.DarkTeamsContainer("Microsoft Teams - Dark", "containers/teams-container-dark.css"));
		hostContainers.push(new ACDesigner.LightTeamsContainer("Microsoft Teams - Light", "containers/teams-container-light.css"));
		hostContainers.push(new ACDesigner.BotFrameworkContainer("Bot Framework Other Channels (Image render)", "containers/bf-image-container.css"));
		hostContainers.push(new ACDesigner.ToastContainer("Windows Notifications (Preview)", "containers/toast-container.css"));

		let designer = new ACDesigner.CardDesigner(hostContainers);
		designer.assetPath = "../node_modules/adaptivecards-designer/dist/";

		/* Here's how to add buttons to the toolbar:

		designer.toolbar.addElement(new ToolbarSeparator());
		designer.toolbar.addElement(
			new ToolbarButton(
				"Save",
				null,
				(sender) => {
					// Here is how to get the payload of the current card from the designer
					let card = designer.getCard();

					alert(JSON.stringify(card, null, 4));
				}
			)
		)
		*/

		// NOTE: Adding toolbar elements must be done BEFORE the designer is attached
		var cardUrl = getParameterByName("card", null);

		if (cardUrl) {

			var xhttp = new XMLHttpRequest();

			xhttp.onload = function () {

				designer.attachTo(document.getElementById("designerRootHost"));

				if (xhttp.responseText && xhttp.responseText != "") {
					designer.setCard(JSON.parse(xhttp.responseText));
				}
	
				history.replaceState(null, null, "/designer");
			};
			// xhttp.onerror = function() {
			// 	designer.
			// };

			try {
				xhttp.open("GET", cardUrl, true);
				xhttp.send();
			}
			catch(e) {
				designer.attachTo(document.getElementById("designerRootHost"));
				
			}
		}
		else {
			designer.attachTo(document.getElementById("designerRootHost"));
		}

		require.config({ paths: { 'vs': '/node_modules/adaptivecards-designer/dist/monaco-editor/min/vs' } });
		require(['vs/editor/editor.main'], function () {
		 	designer.monacoModuleLoaded();
		 }); 


	};
</script>

<div style="display: flex; flex-direction: column; height: 100%;">
	<div id="designerRootHost"></div>
</div>