import * as Adaptive from "adaptivecards";
import * as Designer from "./card-designer-surface";
import { HostContainer } from "./containers/host-container";
import { Toolbar } from "./toolbar";
import { SidePane } from "./side-pane";
export declare class CardDesigner {
    private static MAX_UNDO_STACK_SIZE;
    private _monacoEditor;
    private _hostContainers;
    private _isMonacoEditorLoaded;
    private _designerSurface;
    private _propertySheetHostConfig;
    private _designerHostElement;
    private _draggedPaletteItem;
    private _draggedElement;
    private _currentMousePosition;
    private _card;
    private _activeHostContainer;
    private _undoStack;
    private _undoStackIndex;
    private _toolPalettePane;
    private _jsonEditorPane;
    private _propertySheetPane;
    private _treeViewPane;
    private buildTreeView;
    private buildPropertySheet;
    private addPaletteItem;
    private buildPalette;
    private endDrag;
    private recreateDesignerSurface;
    private activeHostContainerChanged;
    updateJsonEditorLayout(): void;
    private updateFullLayout;
    private jsonUpdateTimer;
    private cardUpdateTimer;
    private updateLayoutTimer;
    private preventCardUpdate;
    private setJsonPayload;
    private updateJsonFromCard;
    private scheduleUpdateJsonFromCard;
    private preventJsonUpdate;
    private getCurrentJsonPayload;
    private updateCardFromJson;
    private scheduleUpdateCardFromJson;
    private scheduleLayoutUpdate;
    private _fullScreenHandler;
    private _fullScreenButton;
    private _hostContainerChoicePicker;
    private _undoButton;
    private _redoButton;
    private _copyJSONButton;
    private prepareToolbar;
    private onResize;
    private loadMonaco;
    private monacoEditorLoaded;
    private updateToolbar;
    private addToUndoStack;
    private handlePointerUp;
    private handlePointerMove;
    readonly toolbar: Toolbar;
    constructor(hostContainers?: Array<HostContainer>);
    attachTo(root: HTMLElement): void;
    undo(): void;
    redo(): void;
    newCard(): void;
    setCard(payload: object): void;
    getCard(): object;
    activeHostContainer: HostContainer;
    readonly canUndo: boolean;
    readonly canRedo: boolean;
    card: Adaptive.AdaptiveCard;
    readonly designerSurface: Designer.CardDesignerSurface;
    readonly treeViewPane: SidePane;
    readonly propertySheetPane: SidePane;
    readonly jsonEditorPane: SidePane;
    readonly toolPalettePane: SidePane;
}
